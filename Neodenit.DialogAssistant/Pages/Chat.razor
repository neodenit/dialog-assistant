@page "/chat/{receiverId}/"
@using System.Net
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Neodenit.DialogAssistant.Shared.Interfaces
@using Neodenit.DialogAssistant.Shared.Models

@inject CookiesProvider CookiesProvider
@inject NavigationManager NavigationManager

@inject IAuthService AuthService
@inject IDialogService DialogService
@inject IPredictionService PredictionService
@inject ITokenLimitService TokenLimitService
@inject IUserService UserService

@inject ISettings Settings

@implements IAsyncDisposable
<AuthorizeView>
    <Authorized>

        @if (receiver is not null)
        {
            <div class="alert alert-info d-none d-sm-block pb-3">
                Write your message with punctuation marks and get a GPT-3 prediction based on your conversation with @(receiver.DisplayName).
            </div>
        }

        @if (messages is not null)
        {
            <div class="message-container mb-3">
                <ul class="list-group">
                    @foreach (var message in messages)
                    {
                        <li class="list-group-item"><span class="font-weight-bold">@(message.Sender.Name):</span> @(message.Text)</li>
                    }
                </ul>
            </div>
        }

        @if (!string.IsNullOrEmpty(prediction))
        {
            <div class="alert alert-success pb-3">
                <span class='font-weight-bold'>@receiver.DisplayName</span>
                may answer something like this:
                <span class='font-weight-bold'>@prediction</span>
            </div>
        }

        @if (credit.HasValue)
        {
            <div class="alert alert-warning pb-3">
                Daily prediction limit: @(credit.Value.ToString("P"))
            </div>
        }

        <form @onsubmit=Send>
            <div class="input-group pb-3">
                <input disabled="@(!IsConnected)" @bind="messageInput" @oninput="Predict" type="text" class="form-control" placeholder="Message" required autofocus>
                <div class="input-group-append">
                    <button disabled="@(!IsConnected)" class="btn btn-outline-secondary" type="submit">Send</button>
                </div>
            </div>
        </form>

        @code {
            [Parameter]
            public string ReceiverId { get; set; }

            private User receiver;

            private HubConnection hubConnection;
            private List<Message> messages;
            private string messageInput;

            private string prediction;
            private double? credit;
            private ResponseStatus status;

            protected override async Task OnInitializedAsync()
            {
                string userName = await AuthService.GetNameAsync();

                var receiverId = int.Parse(ReceiverId);
                receiver = await UserService.GetAsync(receiverId);

                var container = new CookieContainer();
                var cookie = new Cookie
                {
                    Name = ".AspNetCore.Identity.Application",
                    Domain = Settings.DomainName,
                    Value = CookiesProvider.Cookie
                };

                container.Add(cookie);

                Dialog dialog = DialogService.GetDialogForMessage(new Message { Sender = new User { Name = userName }, Receiver = new User { Name = receiver.Name } });
                messages = dialog is null ? new List<Message>() : dialog.Messages.ToList();

                double limit = TokenLimitService.GetLimit(userName);
                credit = 1 - limit;

                hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
                {
                    options.Cookies = container;
                })
                .Build();

                hubConnection.On<Message>("ReceiveMessage", message =>
                {
                    if ((message.Sender.Name == userName || message.Receiver.Name == userName) && message.Sender.Name != message.Receiver.Name)
                    {
                        messages.Add(message);
                        StateHasChanged();
                    }
                });

                await hubConnection.StartAsync();
            }

            private async Task Send()
            {
                string userName = await AuthService.GetNameAsync();
                var message = new Message { Sender = new User { Name = userName }, Receiver = new User { Name = receiver.Name }, Text = messageInput };

                await hubConnection.SendAsync("SendMessage", message);

                messageInput = string.Empty;

                messages.Add(message);
                StateHasChanged();
            }

            private bool IsConnected =>
                hubConnection?.State == HubConnectionState.Connected;

            private async Task Predict(ChangeEventArgs e)
            {
                string userName = await AuthService.GetNameAsync();

                var message = new Message { Sender = new User { Name = userName }, Receiver = new User { Name = receiver.Name }, Text = e.Value.ToString() };
                Response result = await PredictionService.GetPredictionAsync(message, status);

                status = result.Status;

                switch (status)
                {
                    case ResponseStatus.Success:
                        prediction = result.Text;
                        credit = 1 - result.Credit;
                        break;
                    case ResponseStatus.NoCredit:
                        prediction = string.Empty;
                        credit = 0;
                        break;
                    default:
                        prediction = string.Empty;
                        break;

                }
            }

            public async ValueTask DisposeAsync()
            {
                if (hubConnection is not null)
                {
                    await hubConnection.DisposeAsync();
                }
            }
        }

    </Authorized>
    <NotAuthorized>
        <h3>Please log in!</h3>
    </NotAuthorized>
</AuthorizeView>