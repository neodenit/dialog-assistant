@page "/chat/{receiver}/"
@using System.Net
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Neodenit.DialogAssistant.Shared.Interfaces
@using Neodenit.DialogAssistant.Shared.Models

@inject CookiesProvider CookiesProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IGPT3Service GPT3Service
@inject IAuthService AuthService

@implements IAsyncDisposable
<AuthorizeView>
    <Authorized>

        <div class="alert alert-info d-none d-sm-block pb-3">
            Write your message with punctuation marks and get a GPT-3 prediction based on your conversation with @(Receiver).
        </div>

        <div class="message-container mb-3">
            <ul class="list-group">
                @foreach (var message in messages)
                {
                    <li class="list-group-item"><span class="font-weight-bold">@(message.Sender.Name):</span> @(message.Text)</li>
                }
            </ul>
        </div>

        @if (!string.IsNullOrEmpty(prediction))
        {
            <div class="alert alert-success pb-3">
                <span class='font-weight-bold'>@Receiver</span>
                may answer something like this:
                <span class='font-weight-bold'>@prediction</span>
            </div>
        }

        @if (credit.HasValue)
        {
            <div class="alert alert-warning pb-3">
                Daily prediction limit: @(credit.Value.ToString("P"))
            </div>
        }

        <form @onsubmit=Send>
            <div class="input-group pb-3">
                <input disabled="@(!IsConnected)" @bind="messageInput" @oninput="Predict" type="text" class="form-control" placeholder="Message" autofocus>
                <div class="input-group-append">
                    <button disabled="@(!IsConnected)" class="btn btn-outline-secondary" type="submit">Send</button>
                </div>
            </div>
        </form>

        @code {
            [Parameter]
            public string Receiver { get; set; }

            private HubConnection hubConnection;
            private List<Message> messages;
            private string messageInput;

            private string prediction;
            private double? credit;
            private ResponseStatus status;

            protected override async Task OnInitializedAsync()
            {
                var userName = await AuthService.GetNameAsync();

                var container = new CookieContainer();
                var cookie = new Cookie
                {
                    Name = ".AspNetCore.Identity.Application",
                    Domain = "localhost",
                    Value = CookiesProvider.Cookie
                };

                container.Add(cookie);

                var dialog = DialogService.GetDialogForMessage(new Message { Sender = new User { Name = userName }, Receiver = new User { Name = Receiver } });
                messages = dialog is null ? new List<Message>() : dialog.Messages.ToList();

                hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
                {
                    options.Cookies = container;
                })
                .Build();

                hubConnection.On<Message>("ReceiveMessage", message =>
                {
                    if ((message.Sender.Name == userName || message.Receiver.Name == userName) && message.Sender.Name != message.Receiver.Name)
                    {
                        messages.Add(message);
                        StateHasChanged();
                    }
                });

                await hubConnection.StartAsync();
            }

            async Task Send()
            {
                var userName = await AuthService.GetNameAsync();

                await hubConnection.SendAsync("SendMessage", new Message { Sender = new User { Name = userName }, Receiver = new User { Name = Receiver }, Text = messageInput });

                messageInput = string.Empty;
            }

            public bool IsConnected =>
                hubConnection.State == HubConnectionState.Connected;

            async Task Predict(ChangeEventArgs e)
            {
                var userName = await AuthService.GetNameAsync();

                var message = new Message { Sender = new User { Name = userName }, Receiver = new User { Name = Receiver }, Text = e.Value.ToString() };
                var result = await GPT3Service.GetPredictionAsync(message, status);

                status = result.Status;

                switch (status)
                {
                    case ResponseStatus.Success:
                        prediction = result.Text;
                        credit = 1 - result.Credit;
                        break;
                    case ResponseStatus.NoCredit:
                        prediction = string.Empty;
                        credit = 0;
                        break;
                    default:
                        prediction = string.Empty;
                        break;

                }
            }

            public async ValueTask DisposeAsync()
            {
                if (hubConnection is not null)
                {
                    await hubConnection.DisposeAsync();
                }
            }
        }

    </Authorized>
    <NotAuthorized>
        <h3>Please log in!</h3>
    </NotAuthorized>
</AuthorizeView>